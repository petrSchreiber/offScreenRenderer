'  Offscreen renderer

uses "UI"

#include "thinbasic_gl.inc"
#include "thinbasic_glext.inc"
#include "thinbasic_wgl.inc"
#include "osr*.tbasicu"

%OSR_NEAREST_NEIGHBOUR = %GL_NEAREST
%OSR_BILINEAR          = %GL_LINEAR

function offScreenRenderer8b_IsSupported() as long
  return tbgl_oglExtensionSupport("GL_EXT_framebuffer_object")
end function

type offScreenRenderer8b
  private
  
  imageBuffer as osrImageBuffer
  renderQuad  as long
  
  public
  
  function _destroy()
    me.releaseBuffer()
  end function
  
  '
  
  function buildBuffer(width as long, height as long, optional interpolation as long)

    declare set address glGenRenderbuffersEXT,        wglGetProcAddress("glGenRenderbuffersEXT")
    declare set address glBindRenderbufferEXT,        wglGetProcAddress("glBindRenderbufferEXT")
    declare set address glRenderbufferStorageEXT,     wglGetProcAddress("glRenderbufferStorageEXT")
    declare set address glBindRenderbufferEXT,        wglGetProcAddress("glBindRenderbufferEXT")
    declare set address glGenFramebuffersEXT,         wglGetProcAddress("glGenFramebuffersEXT")
    declare set address glBindFramebufferEXT,         wglGetProcAddress("glBindFramebufferEXT")
    declare set address glFramebufferTexture2DEXT,    wglGetProcAddress("glFramebufferTexture2DEXT")
    declare set address glFramebufferRenderbufferEXT, wglGetProcAddress("glFramebufferRenderbufferEXT")
    declare set address glCheckFramebufferStatusEXT,  wglGetProcAddress("glCheckFramebufferStatusEXT")  
    declare set address glDeleteRenderBuffersEXT,     wglGetProcAddress("glDeleteRenderbuffersEXT")
    declare set address glDeleteFrameBuffersEXT,      wglGetProcAddress("glDeleteFramebuffersEXT")
            
    me.imageBuffer.width  = width
    me.imageBuffer.height = height   
  
    ' -- Frame buffer to hold color information
    glGenFramebuffersEXT(1, me.imageBuffer.frameBufferObject)
    glBindFramebufferEXT(%GL_FRAMEBUFFER_EXT, me.imageBuffer.frameBufferObject)
  
    ' -- Render buffer to hold depth information
    glGenRenderbuffersEXT(1, me.imageBuffer.renderBufferObject)  
    glBindRenderbufferEXT(%GL_RENDERBUFFER_EXT, me.imageBuffer.renderBufferObject)
    glRenderbufferStorageEXT(%GL_RENDERBUFFER_EXT, %GL_DEPTH_COMPONENT, me.imageBuffer.width, me.imageBuffer.height)  
    glFramebufferRenderbufferEXT(%GL_FRAMEBUFFER_EXT, %GL_DEPTH_ATTACHMENT_EXT, %GL_RENDERBUFFER_EXT, me.imageBuffer.renderBufferObject)  
    
    ' -- Texture mapping of the FBO
    glGenTextures(1, me.imageBuffer.texture)    
    glBindTexture(%GL_TEXTURE_2D, me.imageBuffer.texture)
    glTexImage2D(%GL_TEXTURE_2D, 0, %GL_RGBA8, me.imageBuffer.width, me.imageBuffer.height, 0, %GL_RGBA, %GL_UNSIGNED_BYTE, 0)
    
    glTexParameterf(%GL_TEXTURE_2D, %GL_TEXTURE_WRAP_S, %GL_CLAMP_TO_EDGE)
    glTexParameterf(%GL_TEXTURE_2D, %GL_TEXTURE_WRAP_T, %GL_CLAMP_TO_EDGE)
    
    select case interpolation
      case 0, %OSR_BILINEAR
        glTexParameteri(%GL_TEXTURE_2D, %GL_TEXTURE_MAG_FILTER, %GL_LINEAR)
        glTexParameteri(%GL_TEXTURE_2D, %GL_TEXTURE_MIN_FILTER, %GL_LINEAR)
        
      case %OSR_NEAREST_NEIGHBOUR 
        glTexParameteri(%GL_TEXTURE_2D, %GL_TEXTURE_MAG_FILTER, %GL_NEAREST)
        glTexParameteri(%GL_TEXTURE_2D, %GL_TEXTURE_MIN_FILTER, %GL_NEAREST)
        
    end select     
    glFramebufferTexture2DEXT(%GL_FRAMEBUFFER_EXT, %GL_COLOR_ATTACHMENT0_EXT, %GL_TEXTURE_2D, me.imageBuffer.texture, 0)
    
    ' -- Did we succeeded?    
    long glStatus = glCheckFramebufferStatusEXT(%GL_FRAMEBUFFER_EXT)
    If(glStatus <> %GL_FRAMEBUFFER_COMPLETE_EXT) Then
      me.destroyImageBuffer8B()
      
      return 1
    Else    
      ' Prepare render quad
      dim listSpace(1) as long at varptr(me.renderQuad)
      TBGL_NewListSpace(listSpace, 1)

      tbgl_newList me.renderQuad
        tbgl_pushColor 255, 255, 255
          tbgl_pushState %TBGL_TEXTURING
          me.bindTexture()
                  
          tbgl_beginPoly %GL_QUADS
            tbgl_texCoord2D 0, 0 : tbgl_vertex 0, 0
            tbgl_texCoord2D 0, 1 : tbgl_vertex 0, 1
            tbgl_texCoord2D 1, 1 : tbgl_vertex 1, 1
            tbgl_texCoord2D 1, 0 : tbgl_vertex 1, 0
          tbgl_endPoly
          tbgl_popState
        tbgl_popColor
      tbgl_endlist
      
      ' Go back to regular frame buffer rendering
      glBindFramebufferEXT(%GL_FRAMEBUFFER_EXT, 0)
  
      return 0
    end If
  
  end function
    
  function releaseBuffer()
    dim listSpace(1) as long at varptr(me.renderQuad)
    tbgl_deleteListSpace(listSpace(1))
    if me.imageBuffer.texture            then glDeleteTextures(1, me.imageBuffer.texture)
    if me.imageBuffer.renderBufferObject then glDeleteRenderBuffersEXT(1, me.imageBuffer.renderBufferObject)
    if me.imageBuffer.frameBufferObject  then glDeleteFrameBuffersEXT(1, me.imageBuffer.frameBufferObject)
  
  end function
  
  ' --
    
  function beginRender() 
    
    glBindFrameBufferEXT(%GL_FRAMEBUFFER_EXT, me.imageBuffer.frameBufferObject)
  
    ' -- Viewport must match the FBO size
    glPushAttrib(%GL_VIEWPORT_BIT)
    glViewport(0, 0, me.imageBuffer.width, me.imageBuffer.height)
  
  end function
  
  function endRender() 
     
    glPopAttrib()
    glBindFrameBufferEXT(%GL_FRAMEBUFFER_EXT, 0)
  
  end function
  
  ' --

  function getTexture() as long
  
    return me.imageBuffer.texture
  
  end function
  
  function bindTexture()
  
    glBindFramebufferEXT(%GL_FRAMEBUFFER_EXT, 0)
    glBindTexture(%GL_TEXTURE_2D, me.imageBuffer.texture)
  
  end function
  
  function getImageBufferBits8B() as string
      
    string myBuffer = string$(me.imageBuffer.width * me.imageBuffer.height * sizeOf(osrPixel_8_8_8_8), $SPC)
  
    glGetTexImage(%GL_TEXTURE_2D, 0, %GL_RGBA, %GL_UNSIGNED_BYTE, byVal strPtr(myBuffer))
  
    return myBuffer
  
  end function
  
  function saveAsBMP( fileName as string) 
  
    me.saveImage(fileName)
  
  end function
  
  function saveImage( fileName as string)
  
    glBindTexture(%GL_TEXTURE_2D, me.imageBuffer.texture)
    string sBuffer = string$(me.imageBuffer.width * me.imageBuffer.height * 4, $SPC)
  
    glGetTexImage(%GL_TEXTURE_2D, 0, %GL_BGRA, %GL_UNSIGNED_BYTE, StrPtr(sBuffer))
    
    dword hBmp = Canvas_BitmapNew(me.imageBuffer.width, me.imageBuffer.height)
    Canvas_Attach hBmp, 0
    Canvas_BitmapSet(sBuffer, me.imageBuffer.width, me.imageBuffer.height)
    Canvas_BitmapSaveImageFile(fileName, hBmp)
    
    Canvas_BitmapEnd
    
  end function
  
  function drawFrame()
    tbgl_clearFrame
      tbgl_renderMatrix2D(0, 0, 1, 1)
      tbgl_calllist me.renderQuad
    tbgl_drawFrame
  end function
  
end type
